[[_git_reset]]
=== Reset Demystified

Antes de seguir con herramientas más especializadas, hablemos sobre `reset` y `checkout`.
Estos comandos son dos de las partes más confusas de Git cuando los ves por primera vez.
Hacen tantas cosas que parece imposible el entenderlas y usarlas adecuadamente.
Para esto recomendamos una simple metáfora.

==== Los tres árboles

Una manera más facil de pensar en `reset` y `checkout` es a traves de la imagen mental de Git siendo un administrador de contenido de tres árboles distintos. 
Por ``tree'' here we really mean  ``colección de archivos'', no a la estrictura de los datos especificamente.
(Hay algunos pocos casos en donde el índice no actua exactamente como un árbol, pero para nuestros propósitos es más fácil pensar que sí por ahora.)

Git como un sistema administra y manipula tres arboles en su operación normal:

[cols="1,2",options="header"]
|================================
| Árbol           | Rol
| CABEZA          | Última instantanea aislada, próximo formulario
| Index             | Proposed next commit snapshot
| Directorio operativo | Caja de arena
|================================

===== La CABEZA

CABEZA es el puntero a la referencia actual de la rama, que es a su vez un puntero para el último aislamiento realizado en esa rama. 
Eso significa que CABEZA será el formulario del siguiente aislamiento que se cree.
Es generalmente más simple el pensar de CABEZA como una instantánea de *tu último aislamiento*.

De hecho, es bastante fácil el ver como esa instantánea luce. 
Aquí está un ejemplo de la obtención del directorio actual y la suma de los chequeos SHA-1 para cada archivo en la instantánea de CABEZA:

[source,console]
----
$ git cat-file -p HEAD
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
author Scott Chacon  1301511835 -0700
committer Scott Chacon  1301511835 -0700

initial commit

$ git ls-tree -r HEAD
100644 blob a906cb2a4a904a152...   README
100644 blob 8f94139338f9404f2...   Rakefile
040000 tree 99f1a6d12cb4b6f19...   lib
----

Los comandos `cat-file` y `ls-tree` son comandos de ``tuberías'' que son usados para cosas de bajo nivel y que no son usadas en el trabajo del día a día, pero nos ayudan a ver lo que está pasando aquí.

[[_El índice]]
===== El índice

El índice es tu *siguiente aislamiento propuesto*. Tambien nos hemos estado refiriendo a este concepto como el ``staging area' as this is what Git looks at when you run `git commit`.

Git rellena este índice con una lista de todos los contenidos de los archivos que fueron previamente chequeados en nuestro directorio de trabajo y como lucían cuando fueron chequeados originalmente.
Entonces remplazas algunos de esos archivos con nuevas versiones de los mismos, y `git commit` los convierte en el árbol para un nuevo aislamiento. 

[source,console]
----
$ git ls-files -s
100644 a906cb2a4a904a152e80877d4088654daad0c859 0	README
100644 8f94139338f9404f26296befa88755fc2598c289 0	Rakefile
100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0	lib/simplegit.rb
----

De nuevo, aquí estamos usando `ls-files`, lo que es más un comando de detrás de escena que muestra como tu índice se ve actualmente.

El índice no es técnicamente una estructura de árbol - es implementada como una patente aplanada - pero para nuestros propósitos esta analogía es bastante acercada.

===== El directorio de trabajo

Finalmente, tienes tu directorio de trabajo.
Los otros dos árboles depositas sus contenidos en una forma eficiente pero inconveniente, dentro de la carpeta `.git`.
El directorio de trabajo los desempaca en archivos, lo que hace más facil para ti el editarlos.
Piensa del directorio de trabajo como una *caja de arena*, donde puedes intentar hacer algunos cambios antes de asignarlos a tu area de montaje (índice) y luego a tu historial.

[source,console]
----
$ tree
.
├── README
├── Rakefile
└── lib
    └── simplegit.rb

1 directory, 3 files
----

==== El flujo de trabajo

El principal propósito de Git es el registrar instantáneas de tu proyecto en mejores estados sucesivos, mediante la manipulación de estos tres árboles.

image::images/reset-workflow.png[]

Visualicemos este proceso: digamos que tu entras a un nuevo directorio con un solo archivo en él.
Lo llamaremos el *v1* del archivo, y luego lo indicaremos con azul.
Ahora corremos `git init`, lo que creará un repositorio Git con una referencia de CABEZA que señalará hacia una rama aun no creada (`master` aun no existe).

image::images/reset-ex1.png[]

En este punto, sólo el Directorio de Trabajo tiene algun contenido.

Ahora queremos asignar este archivo, así que usamos `git add` para tomar el contenido al Directorio de Trabajo y copiarlo al Índice.

image::images/reset-ex2.png[]

Ahora corremos `git commit`, que tomará los contenidos el Índice y los guardará como una instantánea permanente, creará un objeto asignado que señalará a esa instantánea y actualizará `master` para señalar esa asignación.

image::images/reset-ex3.png[]

Si corremos `git status`, no veremos cambios, ya que los tres árboles son el mismo

Ahora queremos hacer un cambio a ese archivo y asignarlo.
Haremos el mismo proceso; primero cambiaremos el archivo en nuestro directorio de trabajo.
Llamemos esto el *v2* del archivo, y lo indicaremos en rojo.

image::images/reset-ex4.png[]

Si corremos `git status` ahora mismo, veremos el archivo en rojo como ``Changes not staged for commit,'' because that entry differs between the Index and the Working Directory.
Next we run `git add` en él para representarlo en nuestro Índice.
image::images/reset-ex5.png[]

En este punto si corremos `git status` veremos el archivo en verde
under ``Changes to be committed'' because the Index and HEAD differ – that is, our proposed next commit is now different from our last commit.
Finally, we run `git commit` para finalizar la asignación.

image::images/reset-ex6.png[]

Ahora `git status` no nos dará respuesta, porque todos los árboles son el mismo de nuevo.

El cambiar de ramas o clonar se hace a través de un proceso similar.
Cuando revisas una rama, cambia la *CABEZA* para señalar a la referencia de la nueva rama, rellena tu *Índice* con la instantánea de esa asignación, entonces copia los contenidos del *Índice* dentro de tu *Directorio de Trabajo*.

==== El rol del reseteo

El comando `reset` tiene más sentido cuando se le mira en este contexto.

Para los propósitos de estos ejemplos, digamos que hemos modificado `file.txt` de nuevo y asignado por una tercera vez. Así que nuestro historial lucirá así:

image::images/reset-start.png[]

Ahora vayamos a lo que `reset` hace cuando lo llamas. Directamente manipula estos tres árboles de una manera simple y predecible.
Ejecuta hasta tres operaciones básicas.

===== Paso 1: mueve CABEZA

La primera cosa que hará `reset` es mover hacia donde señala CABEZA.
Esto no es lo mismo que cambiar CABEZA (que es lo que `checkout` hace); `reset` mueve la rama a la que CABEZA está apuntando.
Esto significa que si CABEZA está fija en la rama `master` (i.e. estás en la rama `master` ), el correr `git reset 9e5e64a` hara que ahora `master` señale hacia `9e5e64a`.

image::images/reset-soft.png[]

No importa que forma de `reset` con una asignación recurras, esta es la primera cosa que siempre tratará de hacer.
Con `reset --soft`, Simplemente se detendrá ahí

Ahora mira otra vez ese diagrama y date cuenta de lo que pasó: eso simplemente deshizo el último comando `git commit`. 
Cuando corres `git commit`, Git crea una nueva asignación y mueve la rama hacia la que apunta CABEZA hacia la misma.
Cuando tú `reset` de nuevo a`HEAD~` (el filial de CABEZA), estás moviendo la rama donde ya estaba, sin cambiar el Índice o el Directorio de Trabajo.
Ahora podrías actualizar el Índice y correr `git commit` de nuevo para lograr lo que `git commit --amend` habría hecho (ver <<_git_amend>>).

===== Paso 2: Actualizando el Índice (--mezclado)

Nota que si corres `git status` ahora verás en verde la diferencia entre Índice y lo que la nueva CABEZA es.

La proxima cosa que `reset` hará es actualizar el Índice con los contenidos de cualquier instantánea que la CABEZA apunta.

image::images/reset-mixed.png[]

Si tú especificas la opción `--mixed`, `reset` se detendrá en este punto.
Esto es lo predeterminado, así que si no espicifícas ninguna opción (solo `git reset HEAD~` en este caso), aquí es cuando el comando se detendrá.

Ahora mira de nuevo ese diagrama y date cuenta de lo que pasó: de nuevo deshizo tu último comando `commit`, pero también _desorganizó_ todo.
Te devolviste hasta donde corriste tus comandos `git add` y `git commit`.

===== Step 3: Updating the Working Directory (--hard)

The third thing that `reset` will do is to make the Working Directory look like the Index.
If you use the `--hard` option, it will continue to this stage.

image::images/reset-hard.png[]

So let's think about what just happened.
You undid your last commit, the `git add` and `git commit` commands, **and** all the work you did in your working directory.

It's important to note that this flag (`--hard`) is the only way to make the `reset` command dangerous, and one of the very few cases where Git will actually destroy data.
Any other invocation of `reset` can be pretty easily undone, but the `--hard` option cannot, since it forcibly overwrites files in the Working Directory.
In this particular case, we still have the *v3* version of our file in a commit in our Git DB, and we could get it back by looking at our `reflog`, but if we had not committed it, Git still would have overwritten the file and it would be unrecoverable.

===== Recap

The `reset` command overwrites these three trees in a specific order, stopping when you tell it to:

1. Move the branch HEAD points to _(stop here if `--soft`)_
2. Make the Index look like HEAD _(stop here unless `--hard`)_
3. Make the Working Directory look like the Index

==== Reset With a Path

That covers the behavior of `reset` in its basic form, but you can also provide it with a path to act upon.
If you specify a path, `reset` will skip step 1, and limit the remainder of its actions to a specific file or set of files.
This actually sort of makes sense – HEAD is just a pointer, and you can't point to part of one commit and part of another.
But the Index and Working directory _can_ be partially updated, so reset proceeds with steps 2 and 3.

So, assume we run `git reset file.txt`.
This form (since you did not specify a commit SHA-1 or branch, and you didn't specify `--soft` or `--hard`) is shorthand for `git reset --mixed HEAD file.txt`, which will:

1. Move the branch HEAD points to _(skipped)_
2. Make the Index look like HEAD _(stop here)_

So it essentially just copies `file.txt` from HEAD to the Index.

image::images/reset-path1.png[]

This has the practical effect of _unstaging_ the file.
If we look at the diagram for that command and think about what `git add` does, they are exact opposites.

image::images/reset-path2.png[]

This is why the output of the `git status` command suggests that you run this to unstage a file.
(See <<_unstaging>> for more on this.)

We could just as easily not let Git assume we meant ``pull the data from HEAD'' by specifying a specific commit to pull that file version from.
We would just run something like `git reset eb43bf file.txt`.

image::images/reset-path3.png[]

This effectively does the same thing as if we had reverted the content of the file to *v1* in the Working Directory, ran `git add` on it, then reverted it back to *v3* again (without actually going through all those steps).
If we run `git commit` now, it will record a change that reverts that file back to *v1*, even though we never actually had it in our Working Directory again.

It's also interesting to note that like `git add`, the `reset` command will accept a `--patch` option to unstage content on a hunk-by-hunk basis.
So you can selectively unstage or revert content.

==== Squashing

Let's look at how to do something interesting with this newfound power – squashing commits.

Say you have a series of commits with messages like ``oops.'', ``WIP'' and ``forgot this file''.
You can use `reset` to quickly and easily squash them into a single commit that makes you look really smart.
(<<_squashing>> shows another way to do this, but in this example it's simpler to use `reset`.)

Let's say you have a project where the first commit has one file, the second commit added a new file and changed the first, and the third commit changed the first file again.
The second commit was a work in progress and you want to squash it down.

image::images/reset-squash-r1.png[]

You can run `git reset --soft HEAD~2` to move the HEAD branch back to an older commit (the first commit you want to keep):

image::images/reset-squash-r2.png[]

And then simply run `git commit` again:

image::images/reset-squash-r3.png[]

Now you can see that your reachable history, the history you would push, now looks like you had one commit with `file-a.txt` v1, then a second that both modified `file-a.txt` to v3 and added `file-b.txt`. The commit with the v2 version of the file is no longer in the history.


==== Check It Out

Finally, you may wonder what the difference between `checkout` and `reset` is.
Like `reset`, `checkout` manipulates the three trees, and it is a bit different depending on whether you give the command a file path or not.

===== Without Paths

Running `git checkout [branch]` is pretty similar to running `git reset --hard [branch]` in that it updates all three trees for you to look like `[branch]`, but there are two important differences.

First, unlike `reset --hard`, `checkout` is working-directory safe; it will check to make sure it's not blowing away files that have changes to them.
Actually, it's a bit smarter than that – it tries to do a trivial merge in the Working Directory, so all of the files you _haven't_ changed in  will be updated.
`reset --hard`, on the other hand, will simply replace everything across the board without checking.

The second important difference is how it updates HEAD.
Where `reset` will move the branch that HEAD points to, `checkout` will move HEAD itself to point to another branch.

For instance, say we have `master` and `develop` branches which point at different commits, and we're currently on `develop` (so HEAD points to it).
If we run `git reset master`, `develop` itself will now point to the same commit that `master` does.
If we instead run `git checkout master`, `develop` does not move, HEAD itself does.
HEAD will now point to `master`.

So, in both cases we're moving HEAD to point to commit A, but _how_ we do so is very different.
`reset` will move the branch HEAD points to, `checkout` moves HEAD itself.

image::images/reset-checkout.png[]

===== With Paths

The other way to run `checkout` is with a file path, which, like `reset`, does not move HEAD.
It is just like `git reset [branch] file` in that it updates the index with that file at that commit, but it also overwrites the file in the working directory.
It would be exactly like `git reset --hard [branch] file` (if `reset` would let you run that) – it's not working-directory safe, and it does not move HEAD.

Also, like `git reset` and `git add`, `checkout` will accept a `--patch` option to allow you to selectively revert file contents on a hunk-by-hunk basis.

==== Summary

Hopefully now you understand and feel more comfortable with the `reset` command, but are probably still a little confused about how exactly it differs from `checkout` and could not possibly remember all the rules of the different invocations.

Here's a cheat-sheet for which commands affect which trees.
The ``HEAD'' column reads ``REF'' if that command moves the reference (branch) that HEAD points to, and ``HEAD'' if it moves HEAD itself.
Pay especial attention to the 'WD Safe?' column – if it says *NO*, take a second to think before running that command.

[options="header", cols="3,1,1,1,1"]
|================================
| | HEAD | Index | Workdir | WD Safe?
| *Commit Level* | | | |
| `reset --soft [commit]` | REF | NO | NO | YES
| `reset [commit]` | REF | YES | NO | YES
| `reset --hard [commit]` | REF | YES | YES | *NO*
| `checkout [commit]` | HEAD | YES | YES | YES
| *File Level* | | | |
| `reset (commit) [file]` | NO | YES | NO | YES
| `checkout (commit) [file]` | NO | YES | YES | *NO*
|================================
